
#include <msp430.h>

 // Initial Greeting you should see upon properly connecting your Launchpad
int i = 0;
volatile int count = 0;
volatile int BitRX = 0;
int main(void)
{

    WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
    PM5CTL0 &= ~LOCKLPM5;
    //Initialize LEDs for pwm
    P1DIR |= 0x01;  //LEDs set as output
    P1SEL0 |= BIT0;
    P1SEL1 &= ~BIT0;
    P1DIR &= ~(BIT1); //1.1 is button
    P1OUT |= BIT1; //Set P1.1 as a high enables ressistor
    P1REN |= BIT1; //Enable pull up resistor on P1.1
    P1IE |= BIT1; //Enable interupts on P1.1
    P1IES |= BIT1;  //Interupt Edge is pos edge
    P1IFG &= ~(BIT1); //Initialize flag to zero


    TB0CCTL0 = CCIE; //interrupt enabled timerB0
    TB0CCR0 = 0x00FF; //Delay for button bouncing

    //B1 used for PWM control
    //Set up CCRs for clock count and pwm control
    TB1CCTL0 = CCIE; // CCR0 interrupt enabled
    TB1CCR0  = 1000;      //Counts to 1000 and resets
    TB1CCTL1 = OUTMOD_7;    //Put Capture Control 1 in set and reset mode
    TB1CCR1 = 500;            //Creates a 50% duty cycle

    TB1CTL = TBSSEL_2 + MC_1 + ID_3;    //TimerA uses SMCLK, with divider of 8, in count up mode
    __bis_SR_register(GIE);       // Enter LPM0, interrupts enabled

}
#pragma vector = PORT1_VECTOR
__interrupt void Port_1(void)
{
    P1OUT |= BIT0;
    if(TB1CCR1 >= 1000)//increases the duty cycle until it overflows, then set to zero
    {
        TB1CCR1 = 0;
    }
    else
    {
        TB1CCR1 = TB1CCR1 + 250;
    }

    TB0CTL = TBSSEL__ACLK  | MC__UP; // AClock, Up mode
    P1IE &= ~BIT1; //Disables interrupt on button
    P1IFG &= ~BIT1; //Disables interrupt flag
}

#pragma vector = TIMER0_B0_VECTOR
__interrupt void Timer0_B (void)
{
    P1OUT &= ~BIT0; //turn off led
    P1IFG &= ~BIT1; //reset interrupt flag
    P1IE |= BIT1; //Enable interupt
    TB0CTL = 0x0000; //Stops from counting and resets timer for bounce count
}
